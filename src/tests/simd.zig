const std = @import("std");

test "vector_search" {

    //force runtime
    var data = [_]u8{ 0x6a, 0xDE, 0x68, 0x73, 0x7a, 0x38, 0x66, 0x37, 0x37, 0x74, 0x71, 0x32, 0x6c, 0x6a, 0x68, 0x62, 0x53, 0x44, 0x50, 0x28, 0x79, 0x32, 0x62, 0xDE, 0x65, 0x30, 0x75, 0x32, 0x33, 0x70, 0x39, 0x38, 0x63, 0x2d, 0x39, 0x63, 0x32, 0x33, 0x37, 0x62, 0x32, 0x33, 0x37, 0x62, 0x32, 0x37, 0x33, 0x63, 0x62, 0x39, 0x66, 0x37, 0x39, 0x67, 0x62, 0x33, 0x76, 0x38, 0x35, 0x67, 0x62, 0x37, 0x35, 0x76, 0x37, 0x2d, 0x30, 0x33, 0x39, 0x62, 0xDE, 0x75, 0x61, 0x68, 0x65, 0x73, 0xDE, 0x70, 0x39, 0x32, 0x33, 0x62, 0x2d, 0x76, 0x20, 0x38, 0x37, 0x32, 0x33, 0x39, 0x38, 0x34, 0x32, 0x39, 0x30, 0x63, 0x20, 0x63, 0x20, 0x38, 0x37, 0x30, 0x20, 0x38, 0x74, 0x34, 0x63, 0x35, 0x33, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x30, 0x2d, 0x35, 0x33, 0x34, 0x20, 0x32, 0x35, 0x33, 0x34, 0x20, 0x65, 0x20, 0xDE, 0x76, 0x73, 0x66, 0xDE, 0x6c, 0x6b, 0x62, 0x6a, 0x61, 0x20, 0xDE, 0x66, 0x66, 0x70, 0x3b, 0x6f, 0x69, 0xDE, 0x61, 0x20, 0x6a, 0x73, 0x66, 0x6b, 0x66, 0x76, 0x5b, 0x6f, 0x69, 0xDE, 0x65, 0x75, 0x3d, 0x72, 0x74, 0x2d, 0x38, 0x37, 0x20, 0x73, 0xDE, 0x62, 0x66, 0x6c, 0x73, 0x61, 0x6b, 0x6a, 0xDE, 0x68, 0x66, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0xDE, 0x66, 0x6b, 0x6a, 0x68, 0x38, 0x6f, 0x33, 0x6a, 0x73, 0x68, 0x68, 0x32, 0x20, 0x6c, 0x73, 0x70, 0x70, 0x20, 0x6b, 0x68, 0x6a, 0x73, 0xDE, 0x6b, 0x6a, 0x68, 0x73, 0x66, 0x20, 0x6f, 0x6f, 0x69, 0x75, 0x30, 0x33, 0x39, 0x20, 0x70, 0x6f, 0x73, 0xDE, 0x2d, 0x6f, 0x69, 0x73, 0x68, 0x6a, 0xDE, 0x3b, 0x2f, 0x6c, 0x66, 0x6b, 0x6a, 0x61, 0x65, 0x73, 0xDE, 0xDE, 0xAD, 0xBE, 0xEF, 0xBA, 0xAD, 0xCA, 0x33, 0x3d, 0x34, 0x75, 0x72, 0x2e, 0x73, 0x61, 0x6b, 0xDE, 0x6a, 0x66, 0x61, 0x73, 0x66, 0x3b, 0x61, 0x6b, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x6b, 0x73, 0x6a, 0x68, 0x66, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x61, 0x73, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x73, 0x61, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x73, 0x6c, 0x61, 0x6b, 0x6a, 0x68, 0x66, 0x69, 0x75, 0x71, 0x6f, 0x79, 0xDE, 0x65, 0x72, 0x71, 0xDE, 0x65, 0x69, 0x75, 0x79, 0x72, 0x69, 0x6f, 0xDE, 0x71, 0x65, 0x6b, 0xDE, 0x71, 0x68, 0x67, 0x72, 0x6b, 0xDE, 0x71, 0x6a, 0x67, 0x65, 0x72, 0x6a, 0x71, 0x68, 0x6b, 0xDE, 0x67, 0x65, 0x61, 0x70, 0x73, 0xDE, 0x6f, 0x66, 0x73, 0x61, 0x69, 0x6f, 0x70, 0xDE, 0x66, 0x75, 0x61, 0x73, 0x6f, 0x70, 0xDE, 0x66, 0x69, 0x75, 0x6f, 0x70, 0xDE, 0x69, 0x66, 0x75, 0x61, 0x70, 0x73, 0x6f, 0x69, 0xDE, 0x66, 0x75, 0x6a, 0xDE, 0x68, 0x73, 0x7a, 0x38, 0x66, 0x37, 0x37, 0x74, 0x71, 0x32, 0x6c, 0x6a, 0x68, 0x62, 0x53, 0x44, 0x50, 0x28, 0x79, 0x32, 0x62, 0xDE, 0x65, 0x30, 0x75, 0x32, 0x33, 0x70, 0x39, 0x38, 0x63, 0x2d, 0x39, 0x63, 0x32, 0x33, 0x37, 0x62, 0x32, 0x33, 0x37, 0x62, 0x32, 0x37, 0x33, 0x63, 0x62, 0x39, 0x66, 0x37, 0x39, 0x67, 0x62, 0x33, 0x76, 0x38, 0x35, 0x67, 0x62, 0x37, 0x35, 0x76, 0x37, 0x2d, 0x30, 0x33, 0x39, 0x62, 0xDE, 0x75, 0x61, 0x68, 0x65, 0x73, 0xDE, 0x70, 0x39, 0x32, 0x33, 0x62, 0x2d, 0x76, 0x20, 0x38, 0x37, 0x32, 0x33, 0x39, 0x38, 0x34, 0x32, 0x39, 0x30, 0x63, 0x20, 0x63, 0x20, 0x38, 0x37, 0x30, 0x20, 0x38, 0x74, 0x34, 0x63, 0x35, 0x33, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x30, 0x2d, 0x35, 0x33, 0x34, 0x20, 0x32, 0x35, 0x33, 0x34, 0x20, 0x65, 0x20, 0xDE, 0x76, 0x73, 0x66, 0xDE, 0x6c, 0x6b, 0x62, 0x6a, 0x61, 0x20, 0xDE, 0x66, 0x66, 0x70, 0x3b, 0x6f, 0x69, 0xDE, 0x61, 0x20, 0x6a, 0x73, 0x66, 0x6b, 0x66, 0x76, 0x5b, 0x6f, 0x69, 0xDE, 0x65, 0x75, 0x3d, 0x72, 0x74, 0x2d, 0x38, 0x37, 0x20, 0x73, 0xDE, 0x62, 0x66, 0x6c, 0x73, 0x61, 0x6b, 0x6a, 0xDE, 0x68, 0x66, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0xDE, 0x66, 0x6b, 0x6a, 0x68, 0x38, 0x6f, 0x33, 0x6a, 0x73, 0x68, 0x68, 0x32, 0x20, 0x6c, 0x73, 0x70, 0x70, 0x20, 0x6b, 0x68, 0x6a, 0x73, 0xDE, 0x6b, 0x6a, 0x68, 0x73, 0x66, 0x20, 0x6f, 0x6f, 0x69, 0x75, 0x30, 0x33, 0x39, 0x20, 0x70, 0x6f, 0x73, 0xDE, 0x2d, 0x6f, 0x69, 0x73, 0x68, 0x6a, 0xDE, 0x3b, 0x2f, 0x6c, 0x66, 0x6b, 0x6a, 0x61, 0x65, 0x73, 0xDE, 0x5b, 0x5d, 0x30, 0x66, 0x39, 0x75, 0x33, 0x3d, 0x34, 0x75, 0x72, 0x2e, 0x73, 0x61, 0x6b, 0xDE, 0x6a, 0x66, 0x61, 0x73, 0x66, 0x3b, 0x61, 0x6b, 0x6a, 0x66, 0x68, 0xDE, 0xAD, 0xBE, 0xEF, 0xBA, 0xAD, 0xCA, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x61, 0x73, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x73, 0x61, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x73, 0x6c, 0x61, 0x6b, 0x6a, 0x68, 0x66, 0x69, 0x75, 0x71, 0x6f, 0x79, 0xDE, 0x65, 0x72, 0x71, 0xDE, 0x65, 0x69, 0x75, 0x79, 0x72, 0x69, 0x6f, 0xDE, 0x71, 0x65, 0x6b, 0xDE, 0x71, 0x68, 0x67, 0x72, 0x6b, 0xDE, 0x71, 0x6a, 0x67, 0x65, 0x72, 0x6a, 0x71, 0x68, 0x6b, 0xDE, 0x67, 0x65, 0x61, 0x70, 0x73, 0xDE, 0x6f, 0x66, 0x73, 0x61, 0x69, 0x6f, 0x70, 0xDE, 0x66, 0x75, 0x61, 0x73, 0x6f, 0x70, 0xDE, 0x66, 0x69, 0x75, 0x6f, 0x70, 0xDE, 0x69, 0x66, 0x75, 0x61, 0x70, 0x73, 0x6f, 0x69, 0xDE, 0x66, 0x75, 0x6a, 0xDE, 0x68, 0x73, 0x7a, 0x38, 0x66, 0x37, 0x37, 0x74, 0x71, 0x32, 0x6c, 0x6a, 0x68, 0x62, 0x53, 0x44, 0x50, 0x28, 0x79, 0x32, 0x62, 0xDE, 0x65, 0x30, 0x75, 0x32, 0x33, 0x70, 0x39, 0x38, 0x63, 0x2d, 0x39, 0x63, 0x32, 0x33, 0x37, 0x62, 0x32, 0x33, 0x37, 0x62, 0x32, 0x37, 0x33, 0x63, 0x62, 0x39, 0x66, 0x37, 0x39, 0x67, 0x62, 0x33, 0x76, 0x38, 0x35, 0x67, 0x62, 0x37, 0x35, 0x76, 0x37, 0x2d, 0x30, 0x33, 0x39, 0x62, 0xDE, 0x75, 0x61, 0x68, 0x65, 0x73, 0xDE, 0x70, 0x39, 0x32, 0x33, 0x62, 0x2d, 0x76, 0x20, 0x38, 0x37, 0x32, 0x33, 0x39, 0x38, 0x34, 0x32, 0x39, 0x30, 0x63, 0x20, 0x63, 0x20, 0x38, 0x37, 0x30, 0x20, 0x38, 0x74, 0x34, 0x63, 0x35, 0x33, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x30, 0x2d, 0x35, 0x33, 0x34, 0x20, 0x32, 0x35, 0x33, 0x34, 0x20, 0x65, 0x20, 0xDE, 0x76, 0x73, 0x66, 0xDE, 0x6c, 0x6b, 0x62, 0x6a, 0x61, 0x20, 0xDE, 0x66, 0x66, 0x70, 0x3b, 0x6f, 0x69, 0xDE, 0x61, 0x20, 0x6a, 0x73, 0x66, 0x6b, 0x66, 0x76, 0x5b, 0x6f, 0x69, 0xDE, 0x65, 0x75, 0x3d, 0x72, 0x74, 0x2d, 0x38, 0x37, 0x20, 0x73, 0xDE, 0x62, 0x66, 0x6c, 0x73, 0x61, 0x6b, 0x6a, 0xDE, 0x68, 0x66, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0xDE, 0x66, 0x6b, 0x6a, 0x68, 0x38, 0x6f, 0x33, 0x6a, 0x73, 0x68, 0x68, 0x32, 0x20, 0x6c, 0x73, 0x70, 0x70, 0x20, 0x6b, 0x68, 0x6a, 0x73, 0xDE, 0x6b, 0x6a, 0x68, 0x73, 0x66, 0x20, 0x6f, 0x6f, 0x69, 0x75, 0x30, 0x33, 0x39, 0x20, 0x70, 0x6f, 0x73, 0xDE, 0x2d, 0x6f, 0x69, 0x73, 0x68, 0x6a, 0xDE, 0x3b, 0x2f, 0x6c, 0x66, 0x6b, 0x6a, 0x61, 0x65, 0x73, 0xDE, 0x5b, 0x5d, 0x30, 0x66, 0x39, 0x75, 0x33, 0x3d, 0x34, 0x75, 0x72, 0x2e, 0x73, 0x61, 0x6b, 0xDE, 0x6a, 0x66, 0x61, 0x73, 0x66, 0x3b, 0x61, 0x6b, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x6b, 0x73, 0x6a, 0x68, 0x66, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x61, 0x73, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x73, 0x61, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x73, 0x6c, 0x61, 0x6b, 0x6a, 0x68, 0x66, 0x69, 0x75, 0x71, 0x6f, 0x79, 0xDE, 0x65, 0x72, 0x71, 0xDE, 0x65, 0x69, 0x75, 0x79, 0x72, 0x69, 0x6f, 0xDE, 0x71, 0x65, 0x6b, 0xDE, 0x71, 0x68, 0x67, 0x72, 0x6b, 0xDE, 0x71, 0x6a, 0x67, 0x65, 0x72, 0x6a, 0x71, 0x68, 0x6b, 0xDE, 0x67, 0x65, 0x61, 0x70, 0x73, 0xDE, 0x6f, 0x66, 0x73, 0x61, 0x69, 0x6f, 0x70, 0xDE, 0x66, 0x75, 0x61, 0x73, 0x6f, 0x70, 0xDE, 0x66, 0x69, 0x75, 0x6f, 0x70, 0xDE, 0x69, 0x66, 0x75, 0x61, 0x70, 0x73, 0x6f, 0x69, 0xDE, 0x66, 0x75, 0x6a, 0xDE, 0x68, 0x73, 0x7a, 0x38, 0x66, 0x37, 0x37, 0x74, 0x71, 0x32, 0x6c, 0x6a, 0x68, 0x62, 0x53, 0x44, 0x50, 0x28, 0x79, 0x32, 0x62, 0xDE, 0x65, 0x30, 0x75, 0x32, 0x33, 0x70, 0x39, 0x38, 0x63, 0x2d, 0x39, 0x63, 0x32, 0x33, 0x37, 0x62, 0x32, 0x33, 0x37, 0x62, 0x32, 0x37, 0x33, 0x63, 0x62, 0x39, 0x66, 0x37, 0x39, 0x67, 0x62, 0x33, 0x76, 0x38, 0x35, 0x67, 0x62, 0x37, 0x35, 0x76, 0x37, 0x2d, 0x30, 0x33, 0x39, 0xDE, 0x00, 0xBE, 0xEF, 0x65, 0x73, 0xDE, 0x70, 0x39, 0x32, 0x33, 0x62, 0x2d, 0x76, 0x20, 0x38, 0x37, 0x32, 0x33, 0x39, 0x38, 0x34, 0x32, 0x39, 0x30, 0x63, 0x20, 0x63, 0x20, 0x38, 0x37, 0x30, 0x20, 0x38, 0x74, 0x34, 0x63, 0x35, 0x33, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x30, 0x2d, 0x35, 0x33, 0x34, 0x20, 0x32, 0x35, 0x33, 0x34, 0x20, 0x65, 0x20, 0xDE, 0x76, 0x73, 0x66, 0xDE, 0x6c, 0x6b, 0x62, 0x6a, 0x61, 0x20, 0xDE, 0x66, 0x66, 0x70, 0x3b, 0x6f, 0x69, 0xDE, 0x61, 0x20, 0x6a, 0x73, 0x66, 0x6b, 0x66, 0x76, 0x5b, 0x6f, 0x69, 0xDE, 0x65, 0x75, 0x3d, 0x72, 0x74, 0x2d, 0x38, 0x37, 0x20, 0x73, 0xDE, 0x62, 0x66, 0x6c, 0x73, 0x61, 0x6b, 0x6a, 0xDE, 0x68, 0x66, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0xDE, 0x66, 0x6b, 0x6a, 0x68, 0x38, 0x6f, 0x33, 0x6a, 0x73, 0x68, 0x68, 0x32, 0x20, 0x6c, 0x73, 0x70, 0x70, 0x20, 0x6b, 0x68, 0x6a, 0x73, 0xDE, 0x6b, 0x6a, 0x68, 0x73, 0x66, 0x20, 0x6f, 0x6f, 0x69, 0x75, 0x30, 0x33, 0x39, 0x20, 0x70, 0x6f, 0x73, 0xDE, 0x2d, 0x6f, 0x69, 0x73, 0x68, 0x6a, 0xDE, 0x3b, 0x2f, 0x6c, 0x66, 0x6b, 0x6a, 0x61, 0x65, 0x73, 0xDE, 0x5b, 0x5d, 0x30, 0x66, 0x39, 0x75, 0x33, 0x3d, 0x34, 0x75, 0x72, 0x2e, 0x73, 0x61, 0x6b, 0xDE, 0x6a, 0x66, 0x61, 0x73, 0x66, 0x3b, 0x61, 0x6b, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x6b, 0x73, 0x6a, 0x68, 0x66, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x61, 0x73, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x73, 0x61, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x73, 0x6c, 0x61, 0x6b, 0x6a, 0x68, 0x66, 0x69, 0x75, 0x71, 0x6f, 0x79, 0xDE, 0x65, 0x72, 0x71, 0xDE, 0x65, 0x69, 0x75, 0x79, 0x72, 0x69, 0x6f, 0xDE, 0x71, 0x65, 0x6b, 0xDE, 0x71, 0x68, 0x67, 0x72, 0x6b, 0xDE, 0x71, 0x6a, 0x67, 0x65, 0x72, 0x6a, 0x71, 0x68, 0x6b, 0xDE, 0x67, 0x65, 0x61, 0x70, 0x73, 0xDE, 0x6f, 0x66, 0x73, 0x61, 0x69, 0x6f, 0x70, 0xDE, 0x66, 0x75, 0x61, 0x73, 0x6f, 0x70, 0xDE, 0x66, 0x69, 0x75, 0x6f, 0x70, 0xDE, 0x69, 0x66, 0x75, 0x61, 0x70, 0x73, 0x6f, 0x69, 0xDE, 0x66, 0x75, 0x6a, 0xDE, 0x68, 0x73, 0x7a, 0x38, 0x66, 0x37, 0x37, 0x74, 0x71, 0x32, 0x6c, 0x6a, 0x68, 0x62, 0x53, 0x44, 0x50, 0x28, 0x79, 0x32, 0x62, 0xDE, 0x65, 0x30, 0x75, 0x32, 0x33, 0x70, 0x39, 0x38, 0x63, 0x2d, 0x39, 0x63, 0x32, 0x33, 0x37, 0x62, 0x32, 0x33, 0x37, 0x62, 0x32, 0x37, 0x33, 0x63, 0x62, 0x39, 0x66, 0x37, 0x39, 0x67, 0x62, 0x33, 0x76, 0x38, 0x35, 0x67, 0x62, 0x37, 0x35, 0x76, 0x37, 0x2d, 0x30, 0x33, 0x39, 0x62, 0xDE, 0x75, 0x61, 0x68, 0x65, 0x73, 0xDE, 0x70, 0x39, 0x32, 0x33, 0x62, 0x2d, 0x76, 0x20, 0x38, 0x37, 0x32, 0x33, 0x39, 0x38, 0x34, 0x32, 0x39, 0x30, 0x63, 0x20, 0x63, 0x20, 0x38, 0x37, 0x30, 0x20, 0x38, 0x74, 0x34, 0x63, 0x35, 0x33, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x30, 0x2d, 0x35, 0x33, 0x34, 0x20, 0x32, 0x35, 0x33, 0x34, 0x20, 0x65, 0x20, 0xDE, 0x76, 0x73, 0x66, 0xDE, 0x6c, 0x6b, 0x62, 0x6a, 0x61, 0x20, 0xDE, 0x66, 0x66, 0x70, 0x3b, 0x6f, 0x69, 0xDE, 0x61, 0x20, 0x6a, 0x73, 0x66, 0x6b, 0x66, 0x76, 0x5b, 0x6f, 0x69, 0xDE, 0x65, 0x75, 0x3d, 0x72, 0x74, 0x2d, 0x38, 0x37, 0x20, 0x73, 0xDE, 0x62, 0x66, 0x6c, 0x73, 0x61, 0x6b, 0x6a, 0xDE, 0x68, 0x66, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0xDE, 0x66, 0x6b, 0x6a, 0x68, 0x38, 0x6f, 0x33, 0x6a, 0x73, 0x68, 0x68, 0x32, 0x20, 0x6c, 0x73, 0x70, 0x70, 0x20, 0x6b, 0x68, 0x6a, 0x73, 0xDE, 0x6b, 0x6a, 0x68, 0x73, 0x66, 0x20, 0x6f, 0x6f, 0x69, 0x75, 0x30, 0x33, 0x39, 0x20, 0x70, 0x6f, 0x73, 0xDE, 0x2d, 0x6f, 0x69, 0x73, 0x68, 0x6a, 0xDE, 0x3b, 0x2f, 0x6c, 0x66, 0x6b, 0x6a, 0x61, 0x65, 0x73, 0xDE, 0x5b, 0x5d, 0x30, 0x66, 0x39, 0x75, 0x33, 0x3d, 0x34, 0x75, 0x72, 0x2e, 0x73, 0x61, 0x6b, 0xDE, 0x6a, 0x66, 0x61, 0x73, 0x66, 0x3b, 0x61, 0x6b, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x6b, 0x73, 0x6a, 0x68, 0x66, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x61, 0x73, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x73, 0x61, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x73, 0x6c, 0x61, 0x6b, 0x6a, 0x68, 0x66, 0x69, 0x75, 0x71, 0x6f, 0x79, 0xDE, 0x65, 0x72, 0x71, 0xDE, 0x65, 0x69, 0x75, 0x79, 0x72, 0x69, 0x6f, 0xDE, 0x71, 0x65, 0x6b, 0xDE, 0x71, 0x68, 0x67, 0x72, 0x6b, 0xDE, 0x71, 0x6a, 0x67, 0x65, 0x72, 0x6a, 0x71, 0x68, 0x6b, 0xDE, 0x67, 0x65, 0x61, 0x70, 0x73, 0xDE, 0x6f, 0x66, 0x73, 0x61, 0x69, 0x6f, 0x70, 0xDE, 0x66, 0x75, 0x61, 0x73, 0x6f, 0x70, 0xDE, 0x66, 0x69, 0x75, 0x6f, 0x70, 0xDE, 0x69, 0x66, 0x75, 0x61, 0x70, 0x73, 0x6f, 0x69, 0xDE, 0x66, 0x75, 0x6a, 0xDE, 0x68, 0x73, 0x7a, 0x38, 0x66, 0x37, 0x37, 0x74, 0x71, 0x32, 0x6c, 0x6a, 0x68, 0x62, 0x53, 0x44, 0x50, 0x28, 0x79, 0x32, 0x62, 0xDE, 0x65, 0x30, 0x75, 0x32, 0x33, 0x70, 0x39, 0x38, 0x63, 0x2d, 0x39, 0x63, 0x32, 0x33, 0x37, 0x62, 0x32, 0x33, 0x37, 0x62, 0x32, 0x37, 0x33, 0x63, 0x62, 0x39, 0x66, 0x37, 0x39, 0x67, 0x62, 0x33, 0x76, 0x38, 0x35, 0x67, 0x62, 0x37, 0x35, 0x76, 0x37, 0x2d, 0x30, 0x33, 0x39, 0x62, 0xDE, 0x75, 0x61, 0x68, 0x65, 0x73, 0xDE, 0x70, 0x39, 0x32, 0x33, 0x62, 0x2d, 0x76, 0x20, 0x38, 0x37, 0x32, 0x33, 0x39, 0x38, 0x34, 0x32, 0x39, 0x30, 0x63, 0x20, 0x63, 0x20, 0x38, 0x37, 0x30, 0x20, 0x38, 0x74, 0x34, 0x63, 0x35, 0x33, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x30, 0x2d, 0x35, 0x33, 0x34, 0x20, 0x32, 0x35, 0x33, 0x34, 0x20, 0x65, 0x20, 0xDE, 0x76, 0x73, 0x66, 0xDE, 0x6c, 0x6b, 0x62, 0x6a, 0x61, 0x20, 0xDE, 0x66, 0x66, 0x70, 0x3b, 0x6f, 0x69, 0xDE, 0x61, 0x20, 0x6a, 0x73, 0x66, 0x6b, 0x66, 0x76, 0x5b, 0x6f, 0x69, 0xDE, 0x65, 0x75, 0x3d, 0x72, 0x74, 0x2d, 0x38, 0x37, 0x20, 0x73, 0xDE, 0x62, 0x66, 0x6c, 0x73, 0x61, 0x6b, 0x6a, 0xDE, 0x68, 0x66, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0x6c, 0x6b, 0x6a, 0x68, 0x61, 0x73, 0xDE, 0x66, 0x6b, 0x6a, 0x68, 0x38, 0x6f, 0x33, 0x6a, 0x73, 0x68, 0x68, 0x32, 0x20, 0x6c, 0x73, 0x70, 0x70, 0x20, 0x6b, 0x68, 0x6a, 0x73, 0xDE, 0x6b, 0x6a, 0x68, 0x73, 0x66, 0x20, 0x6f, 0x6f, 0x69, 0x75, 0x30, 0x33, 0x39, 0x20, 0x70, 0x6f, 0x73, 0xDE, 0x2d, 0x6f, 0x69, 0x73, 0x68, 0x6a, 0xDE, 0x3b, 0x2f, 0x6c, 0x66, 0x6b, 0x6a, 0x61, 0x65, 0x73, 0xDE, 0x5b, 0x5d, 0x30, 0x66, 0x39, 0x75, 0x33, 0x3d, 0x34, 0x75, 0x72, 0x2e, 0x73, 0x61, 0x6b, 0xDE, 0x6a, 0x66, 0x61, 0x73, 0x66, 0x3b, 0x61, 0x6b, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x6b, 0x73, 0x6a, 0x68, 0x66, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x61, 0x73, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x61, 0x6c, 0x73, 0x6b, 0xDE, 0x6a, 0x68, 0x66, 0x73, 0x61, 0x6c, 0x6b, 0xDE, 0x6a, 0x66, 0x68, 0x73, 0x6c, 0x61, 0x6b, 0x6a, 0x68, 0x66, 0x69, 0x75, 0x71, 0x6f, 0x79, 0xDE, 0x65, 0x72, 0x71, 0xDE, 0x65, 0x69, 0x75, 0x79, 0x72, 0x69, 0x6f, 0xDE, 0x71, 0x65, 0x6b, 0xDE, 0x71, 0x68, 0x67, 0x72, 0x6b, 0xDE, 0x71, 0x6a, 0x67, 0x65, 0xDE, 0x00, 0xBE, 0xEF, 0xBA, 0xAD, 0x00, 0xFE, 0x61, 0x70, 0x73, 0xDE, 0x6f, 0x66, 0x73, 0x61, 0x69, 0x6f, 0x70, 0xDE, 0x66, 0x75, 0x61, 0x73, 0x6f, 0x70, 0xDE, 0x66, 0x69, 0x75, 0x6f, 0x70, 0xDE, 0x69, 0x66, 0x75, 0x61, 0x70, 0x73, 0x6f, 0x69, 0xDE, 0x66, 0x75 };
    _ = &data;
    var patt = [_]u8{ 0xDE, 0xAD, 0xBE, 0xEF, 0xBA, 0xAD, 0xCA, 0xFE };
    _ = &patt;
    var mask = [_]u8{ 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff };
    _ = &mask;

    var t = try std.time.Timer.start();

    var r1: usize = 0;
    var r2: usize = 0;
    var r3: usize = 0;

    var t1: u64 = 0;
    var t2: u64 = 0;
    var t3: u64 = 0;

    // Simd using size of pattern
    {
        // Constant time
        const sz = patt.len;
        const mask_: @Vector(sz, u8) = mask[0..sz].*;
        const find: @Vector(sz, u8) = patt[0..sz].*;

        // Direct SIMD compare for each position in data
        t.reset();
        for (0..data.len - sz) |i| {
            const slc: []const u8 = &data;
            const src: @Vector(sz, u8) = slc[i..][0..8].*; //we dont want to hardcode but only accept compile time values. any way we can 'unsafe' promise these? or generic
            if (@reduce(.And, ((src ^ find) | mask_) == mask_)) {
                r1 = i;
            }
        }
        t1 = t.lap();

        // Defer SIMD until first byte match
        for (0..data.len - sz) |i| {

            // Don't bother loading SIMD unless we find a byte
            // However now we will double-check each instance of the starting byte.
            // Slower on data where the pattern initial byte is very prevelent (~15% of all bytes).
            //
            if (data[i] != patt[0]) {
                continue;
            }
            const slc: []const u8 = &data;
            const src: @Vector(sz, u8) = slc[i..][0..8].*; //we dont want to hardcode but only accept compile time values. any way we can 'unsafe' promise these? or generic
            if (@reduce(.And, ((src ^ find) | mask_) == mask_)) {
                r2 = i;
            }
        }
        t2 = t.lap();

        // Defer SIMD until first byte match & last byte match
        // Get final non-wild byte position
        const last_non_wc_i: usize = v: {
            var i = sz - 1;
            while (sz >= 0) : (i -= 1) {
                if (mask[i] != 0xFF) {
                    break :v i;
                }
            }
            break :v i;
        };

        for (0..data.len - sz) |i| {

            // Don't bother loading SIMD unless we find a byte
            // However now we will double-check each instance of the starting byte.
            // Slower on data where the pattern initial byte is very prevelent (~15% of all bytes).
            if (data[i] != patt[0]) {
                continue;
            }
            if (data[i + last_non_wc_i] != patt[last_non_wc_i]) {
                continue;
            }
            const slc: []const u8 = &data;
            const src: @Vector(sz, u8) = slc[i..][0..8].*; //we dont want to hardcode but only accept compile time values. any way we can 'unsafe' promise these? or generic
            if (@reduce(.And, ((src ^ find) | mask_) == mask_)) {
                r3 = i;
            }
        }
        t3 = t.lap();
    }

    // SIMD Block
    {
        // Defer SIMD until first byte match
        // Repeat pattern over max SIMD size, scan block parallel
        //
        // [                     256                      ] // data
        // [    64    ][    64    ][    64    ][    64    ] // repeated pattern
        // x           x           ^           x
        //                         Found => return pos
        // [..........]

        // Constant time
        //
        const max_simd: usize = 128;

        // assert size before loading vec.
        // pattern sz but evenly go into simd sz
        if (patt.len == 0) {
            unreachable;
        } else if (max_simd % patt.len != 0) {
            unreachable;
        }

        const ct_packed: usize = max_simd / patt.len;

        // mask for checking individual chunks of results
        const imask: @Vector(patt.len, u8) = mask[0..patt.len].*;

        // OR mask to flatten wildcard values
        const mask_: @Vector(max_simd, u8) = mask[0..patt.len].* ** ct_packed;

        // SIMD packed multi-scan pattern
        const find: @Vector(max_simd, u8) = patt[0..patt.len].* ** ct_packed;

        var i: usize = 0;
        // Inc moves full simd block
        // but compensate for testing each position in pattern size in previous block
        while (i < data.len - max_simd) : (i += (max_simd - patt.len)) {
            const slc: []const u8 = &data;

            // re-scan each step
            for (0..patt.len) |_| {
                const src: @Vector(max_simd, u8) = slc[i..][0..max_simd].*;
                const res = ((src ^ find) | mask_);

                // I think we lose a lot of time here moving data in and out of simd
                // ?> maybe we make simd masks for each position instead
                // ?> maybe we can move data in simd registers? or index (slice-like) into the vectors
                const cpy: [max_simd]u8 = res;
                const cpy2: []const u8 = &cpy;
                for (0..ct_packed) |j| { // check each pattern in the block
                    const chunk: @Vector(patt.len, u8) = cpy2[j * patt.len ..][0..8].*;
                    if (@reduce(.And, chunk == imask)) {
                        r3 = i + j * patt.len;
                    }
                }

                i += 1;
            }
        }
    }

    std.debug.print("{d} - {d} - {d}\n", .{ r1, r2, r3 });
    std.debug.print("0x{X}\n0x{X}\n0x{X}\n", .{ t1, t2, t3 });
}
